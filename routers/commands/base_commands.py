from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from database import get_quiz_stat, update_quiz_index
from quiz_data import quiz_data

router = Router(name=__name__)


def generate_options_keyboard(answer_options, right_answer):
    builder = InlineKeyboardBuilder()

    for option in answer_options:
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data="right_answer" if option == right_answer else "wrong_answer")
        )

    builder.adjust(1)
    return builder.as_markup()


@router.callback_query(F.data == "right_answer")
async def right_answer(callback: types.CallbackQuery):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    quiz_stat = await get_quiz_stat(callback.from_user.id)
    current_question_index = quiz_stat[0]
    correct_option = quiz_data[current_question_index]['correct_option']
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"))

    await callback.message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ {quiz_data[current_question_index]['options'][correct_option]}", reply_markup=builder.as_markup(resize_keyboard=True))
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    correct_answer = quiz_stat[1] + 1
    incorrect_answer = quiz_stat[2]
    await update_quiz_index(callback.from_user.id, current_question_index, correct_answer, incorrect_answer)

    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        await callback.message.answer("üíØ –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")


@router.callback_query(F.data == "wrong_answer")
async def wrong_answer(callback: types.CallbackQuery):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quiz_stat = await get_quiz_stat(callback.from_user.id)
    current_question_index = quiz_stat[0]
    correct_option = quiz_data[current_question_index]['correct_option']
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"))

    await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz_data[current_question_index]['options'][correct_option]}", reply_markup=builder.as_markup(resize_keyboard=True))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    correct_answer = quiz_stat[1]
    incorrect_answer = quiz_stat[2] + 1
    await update_quiz_index(callback.from_user.id, current_question_index, correct_answer, incorrect_answer)

    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        await callback.message.answer("üíØ –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=builder.as_markup(resize_keyboard=True))


@router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@router.message(Command("quiz"))
async def cmd_quiz(message: types.Message):

    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)


@router.message(F.text == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
@router.message(Command("save"))
async def cmd_save(message: types.Message):

    await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
    await stat(message)


async def stat(message):
    user_id = message.from_user.id
    quiz_stat = await get_quiz_stat(user_id)
    current_question_index = quiz_stat[0]
    correct_answer = quiz_stat[1]
    incorrect_answer = quiz_stat[2]
    len_of_questions = len(quiz_data)
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–≤–∏–∑"))
    await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å: {current_question_index / len_of_questions * 100}% –∫–≤–∏–∑–∞ –ø—Ä–æ–π–¥–µ–Ω–æ!\n"
                         f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answer} üòÉ\n"
                         f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect_answer} ‚òπÔ∏è",
                         reply_markup=builder.as_markup(resize_keyboard=True))


@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–≤–∏–∑")
@router.message(Command("continue"))
async def cmd_continue(message: types.Message):
    user_id = message.from_user.id
    await get_question(message, user_id)


async def get_question(message, user_id):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quiz_stat = await get_quiz_stat(user_id)
    current_question_index = quiz_stat[0]
    correct_index = quiz_data[current_question_index]['correct_option']
    opts = quiz_data[current_question_index]['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)


async def new_quiz(message):
    user_id = message.from_user.id
    current_question_index = 0
    correct_answer = 0
    incorrect_answer = 0
    await update_quiz_index(user_id, current_question_index, correct_answer, incorrect_answer)
    await get_question(message, user_id)
